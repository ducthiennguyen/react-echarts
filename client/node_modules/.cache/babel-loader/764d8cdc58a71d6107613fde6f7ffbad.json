{"ast":null,"code":"var _jsxFileName = \"/home/thien/Documents/react-echarts/src/App.js\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react'; // alphavantage API: 4ZHSS420ZVOBWM4I\n\nvar func = 'FX_DAILY';\nvar from_symbol = 'USD';\nvar to_symbol = 'JPY';\nconst apikey = '4ZHSS420ZVOBWM4I';\nvar URL = `https://www.alphavantage.co/query?function=${func}&from_symbol=${from_symbol}&to_symbol=${to_symbol}&apikey=${apikey}`;\nvar date_array = [];\nvar close_values = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      values: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL).then(results => {\n      return results.json();\n    }).then(data => {\n      let values = data['Time Series FX (Daily)'];\n\n      for (var date in values) {\n        date_array.push(date);\n        close_values.push(parseFloat(values[date][\"3. low\"]));\n      }\n\n      this.setState({\n        values: values\n      });\n    });\n  }\n\n  render() {\n    console.log(date_array);\n    console.log(close_values);\n    return React.createElement(ReactEcharts, {\n      option: {\n        xAxis: {\n          type: 'value',\n          data: date_array\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          type: 'line',\n          data: close_values\n        }]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/thien/Documents/react-echarts/src/App.js"],"names":["React","Component","ReactEcharts","func","from_symbol","to_symbol","apikey","URL","date_array","close_values","App","constructor","state","values","componentDidMount","fetch","then","results","json","data","date","push","parseFloat","setState","render","console","log","xAxis","type","yAxis","series"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CAEA;;AAEA,IAAIC,IAAI,GAAG,UAAX;AACA,IAAIC,WAAW,GAAG,KAAlB;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,MAAMC,MAAM,GAAG,kBAAf;AACA,IAAIC,GAAG,GAAI,8CAA6CJ,IAAK,gBAAeC,WAAY,cAAaC,SAAU,WAAUC,MAAO,EAAhI;AACA,IAAIE,UAAU,GAAG,EAAjB;AACA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAC1BU,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE;AADG,KAAb;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAACR,GAAD,CAAL,CACCS,IADD,CACMC,OAAO,IAAI;AACf,aAAOA,OAAO,CAACC,IAAR,EAAP;AACD,KAHD,EAGGF,IAHH,CAGQG,IAAI,IAAI;AACd,UAAIN,MAAM,GAAGM,IAAI,CAAC,wBAAD,CAAjB;;AACA,WAAK,IAAIC,IAAT,IAAiBP,MAAjB,EAAyB;AACvBL,QAAAA,UAAU,CAACa,IAAX,CAAgBD,IAAhB;AACAX,QAAAA,YAAY,CAACY,IAAb,CAAkBC,UAAU,CAACT,MAAM,CAACO,IAAD,CAAN,CAAa,QAAb,CAAD,CAA5B;AACD;;AACD,WAAKG,QAAL,CAAc;AAACV,QAAAA,MAAM,EAAEA;AAAT,OAAd;AACD,KAVD;AAWD;;AAEDW,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,UAAZ;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,YAAZ;AACA,WACE,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE;AACNkB,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE,OADD;AAELT,UAAAA,IAAI,EAAEX;AAFD,SADD;AAKNqB,QAAAA,KAAK,EAAE;AACLD,UAAAA,IAAI,EAAE;AADD,SALD;AAQNE,QAAAA,MAAM,EAAE,CAAC;AACPF,UAAAA,IAAI,EAAE,MADC;AAEPT,UAAAA,IAAI,EAAEV;AAFC,SAAD;AARF,OADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiBD;;AA1CyB;;AA6C5B,eAAeC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\n// alphavantage API: 4ZHSS420ZVOBWM4I\n\nvar func = 'FX_DAILY';\nvar from_symbol = 'USD';\nvar to_symbol = 'JPY';\nconst apikey = '4ZHSS420ZVOBWM4I';\nvar URL = `https://www.alphavantage.co/query?function=${func}&from_symbol=${from_symbol}&to_symbol=${to_symbol}&apikey=${apikey}`;\nvar date_array = [];\nvar close_values = [];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      values: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL)\n    .then(results => {\n      return results.json();\n    }).then(data => {\n      let values = data['Time Series FX (Daily)'];\n      for (var date in values) {\n        date_array.push(date);\n        close_values.push(parseFloat(values[date][\"3. low\"]));\n      }\n      this.setState({values: values});\n    })\n  }\n\n  render() {\n    console.log(date_array);\n    console.log(close_values);\n    return (\n      <ReactEcharts\n        option={{\n          xAxis: {\n            type: 'value',\n            data: date_array\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [{\n            type: 'line',\n            data: close_values\n          }]\n        }}\n      />\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}