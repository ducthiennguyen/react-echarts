{"ast":null,"code":"var _jsxFileName = \"/home/thien/Documents/react-echarts/client/src/chart1.js\";\nimport React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nvar URL = `https://www.alphavantage.co/query?function=FX_INTRADAY&from_symbol=${from_symbol}&to_symbol=${to_symbol}&interval=1min&apikey=${apikey}`;\nvar date_array = [];\nvar close_values = [];\n\nclass Chart1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      date_array: [],\n      close_values: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL).then(results => {\n      return results.json();\n    }).then(data => {\n      let values = data['Time Series FX (1min)'];\n\n      for (var date in values) {\n        date_array.unshift(date);\n        close_values.unshift(parseFloat(values[date][\"3. low\"]));\n\n        if (date_array.length >= 30) {\n          break;\n        }\n      }\n\n      this.setState({\n        date_array: date_array,\n        close_values: close_values\n      });\n    });\n  }\n\n  render() {\n    console.log(date_array);\n    console.log(close_values.length);\n    return React.createElement(ReactEcharts, {\n      option: {\n        xAxis: {\n          type: 'category',\n          data: this.state.date_array\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          type: 'line',\n          data: this.state.close_values\n        }]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Chart1;","map":{"version":3,"sources":["/home/thien/Documents/react-echarts/client/src/chart1.js"],"names":["React","Component","ReactEcharts","URL","from_symbol","to_symbol","apikey","date_array","close_values","Chart1","constructor","state","componentDidMount","fetch","then","results","json","data","values","date","unshift","parseFloat","length","setState","render","console","log","xAxis","type","yAxis","series"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AAEA,IAAIC,GAAG,GAAI,sEAAqEC,WAAY,cAAaC,SAAU,yBAAwBC,MAAO,EAAlJ;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAC7BS,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXJ,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAEDI,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAACV,GAAD,CAAL,CACCW,IADD,CACMC,OAAO,IAAI;AACf,aAAOA,OAAO,CAACC,IAAR,EAAP;AACD,KAHD,EAGGF,IAHH,CAGQG,IAAI,IAAI;AACd,UAAIC,MAAM,GAAGD,IAAI,CAAC,uBAAD,CAAjB;;AACA,WAAK,IAAIE,IAAT,IAAiBD,MAAjB,EAAyB;AACvBX,QAAAA,UAAU,CAACa,OAAX,CAAmBD,IAAnB;AACAX,QAAAA,YAAY,CAACY,OAAb,CAAqBC,UAAU,CAACH,MAAM,CAACC,IAAD,CAAN,CAAa,QAAb,CAAD,CAA/B;;AACA,YAAIZ,UAAU,CAACe,MAAX,IAAqB,EAAzB,EAA6B;AAC3B;AACD;AACF;;AACD,WAAKC,QAAL,CAAc;AACZhB,QAAAA,UAAU,EAAEA,UADA;AAEZC,QAAAA,YAAY,EAAEA;AAFF,OAAd;AAID,KAhBD;AAiBD;;AAEDgB,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYnB,UAAZ;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,YAAY,CAACc,MAAzB;AACA,WACE,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE;AACNK,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE,UADD;AAELX,UAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWJ;AAFZ,SADD;AAKNsB,QAAAA,KAAK,EAAE;AACLD,UAAAA,IAAI,EAAE;AADD,SALD;AAQNE,QAAAA,MAAM,EAAE,CAAC;AACPF,UAAAA,IAAI,EAAE,MADC;AAEPX,UAAAA,IAAI,EAAE,KAAKN,KAAL,CAAWH;AAFV,SAAD;AARF,OADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiBD;;AAjD4B;;AAoD/B,eAAeC,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nvar URL = `https://www.alphavantage.co/query?function=FX_INTRADAY&from_symbol=${from_symbol}&to_symbol=${to_symbol}&interval=1min&apikey=${apikey}`;\nvar date_array = [];\nvar close_values = [];\n\nclass Chart1 extends Component {\n  constructor() {\n    super();\n    this.state = {\n      date_array: [],\n      close_values: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(URL)\n    .then(results => {\n      return results.json();\n    }).then(data => {\n      let values = data['Time Series FX (1min)'];\n      for (var date in values) {\n        date_array.unshift(date);\n        close_values.unshift(parseFloat(values[date][\"3. low\"]));\n        if (date_array.length >= 30) {\n          break;\n        }\n      }\n      this.setState({\n        date_array: date_array,\n        close_values: close_values\n      });\n    })\n  }\n\n  render() {\n    console.log(date_array);\n    console.log(close_values.length);\n    return (\n      <ReactEcharts\n        option={{\n          xAxis: {\n            type: 'category',\n            data: this.state.date_array\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [{\n            type: 'line',\n            data: this.state.close_values\n          }]\n        }}\n      />\n    );\n  }\n}\n\nexport default Chart1;\n"]},"metadata":{},"sourceType":"module"}